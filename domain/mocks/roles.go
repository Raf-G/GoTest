// Code generated by MockGen. DO NOT EDIT.
// Source: roles.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	domain "example.com/m/v2/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockRolesStorage is a mock of RolesStorage interface.
type MockRolesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRolesStorageMockRecorder
}

// MockRolesStorageMockRecorder is the mock recorder for MockRolesStorage.
type MockRolesStorageMockRecorder struct {
	mock *MockRolesStorage
}

// NewMockRolesStorage creates a new mock instance.
func NewMockRolesStorage(ctrl *gomock.Controller) *MockRolesStorage {
	mock := &MockRolesStorage{ctrl: ctrl}
	mock.recorder = &MockRolesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesStorage) EXPECT() *MockRolesStorageMockRecorder {
	return m.recorder
}

// GetRole mocks base method.
func (m *MockRolesStorage) GetRole(arg0 int) (domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0)
	ret0, _ := ret[0].(domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRolesStorageMockRecorder) GetRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRolesStorage)(nil).GetRole), arg0)
}

// GetRoles mocks base method.
func (m *MockRolesStorage) GetRoles() ([]domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles")
	ret0, _ := ret[0].([]domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockRolesStorageMockRecorder) GetRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockRolesStorage)(nil).GetRoles))
}

// MockRolesService is a mock of RolesService interface.
type MockRolesService struct {
	ctrl     *gomock.Controller
	recorder *MockRolesServiceMockRecorder
}

// MockRolesServiceMockRecorder is the mock recorder for MockRolesService.
type MockRolesServiceMockRecorder struct {
	mock *MockRolesService
}

// NewMockRolesService creates a new mock instance.
func NewMockRolesService(ctrl *gomock.Controller) *MockRolesService {
	mock := &MockRolesService{ctrl: ctrl}
	mock.recorder = &MockRolesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesService) EXPECT() *MockRolesServiceMockRecorder {
	return m.recorder
}

// GetRole mocks base method.
func (m *MockRolesService) GetRole(arg0 int) (domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0)
	ret0, _ := ret[0].(domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRolesServiceMockRecorder) GetRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRolesService)(nil).GetRole), arg0)
}

// GetRoleAll mocks base method.
func (m *MockRolesService) GetRoleAll() ([]domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleAll")
	ret0, _ := ret[0].([]domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleAll indicates an expected call of GetRoleAll.
func (mr *MockRolesServiceMockRecorder) GetRoleAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleAll", reflect.TypeOf((*MockRolesService)(nil).GetRoleAll))
}

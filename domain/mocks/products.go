// Code generated by MockGen. DO NOT EDIT.
// Source: products.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	domain "example.com/m/v2/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockProductsStorage is a mock of ProductsStorage interface.
type MockProductsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockProductsStorageMockRecorder
}

// MockProductsStorageMockRecorder is the mock recorder for MockProductsStorage.
type MockProductsStorageMockRecorder struct {
	mock *MockProductsStorage
}

// NewMockProductsStorage creates a new mock instance.
func NewMockProductsStorage(ctrl *gomock.Controller) *MockProductsStorage {
	mock := &MockProductsStorage{ctrl: ctrl}
	mock.recorder = &MockProductsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsStorage) EXPECT() *MockProductsStorageMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductsStorage) AddProduct(arg0 domain.Product) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductsStorageMockRecorder) AddProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductsStorage)(nil).AddProduct), arg0)
}

// DeleteProduct mocks base method.
func (m *MockProductsStorage) DeleteProduct(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductsStorageMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductsStorage)(nil).DeleteProduct), arg0)
}

// EditProduct mocks base method.
func (m *MockProductsStorage) EditProduct(arg0 domain.Product) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProduct", arg0)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditProduct indicates an expected call of EditProduct.
func (mr *MockProductsStorageMockRecorder) EditProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProduct", reflect.TypeOf((*MockProductsStorage)(nil).EditProduct), arg0)
}

// GetProduct mocks base method.
func (m *MockProductsStorage) GetProduct(arg0 int) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductsStorageMockRecorder) GetProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductsStorage)(nil).GetProduct), arg0)
}

// GetProducts mocks base method.
func (m *MockProductsStorage) GetProducts() ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductsStorageMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductsStorage)(nil).GetProducts))
}

// MockProductsService is a mock of ProductsService interface.
type MockProductsService struct {
	ctrl     *gomock.Controller
	recorder *MockProductsServiceMockRecorder
}

// MockProductsServiceMockRecorder is the mock recorder for MockProductsService.
type MockProductsServiceMockRecorder struct {
	mock *MockProductsService
}

// NewMockProductsService creates a new mock instance.
func NewMockProductsService(ctrl *gomock.Controller) *MockProductsService {
	mock := &MockProductsService{ctrl: ctrl}
	mock.recorder = &MockProductsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsService) EXPECT() *MockProductsServiceMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductsService) AddProduct(arg0 domain.Product) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductsServiceMockRecorder) AddProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductsService)(nil).AddProduct), arg0)
}

// DeleteProduct mocks base method.
func (m *MockProductsService) DeleteProduct(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductsServiceMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductsService)(nil).DeleteProduct), arg0)
}

// EditProduct mocks base method.
func (m *MockProductsService) EditProduct(arg0 domain.Product) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProduct", arg0)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditProduct indicates an expected call of EditProduct.
func (mr *MockProductsServiceMockRecorder) EditProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProduct", reflect.TypeOf((*MockProductsService)(nil).EditProduct), arg0)
}

// GetAllProducts mocks base method.
func (m *MockProductsService) GetAllProducts() ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductsServiceMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductsService)(nil).GetAllProducts))
}

// GetProduct mocks base method.
func (m *MockProductsService) GetProduct(arg0 int) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductsServiceMockRecorder) GetProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductsService)(nil).GetProduct), arg0)
}

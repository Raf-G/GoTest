// Code generated by MockGen. DO NOT EDIT.
// Source: baskets.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	domain "example.com/m/v2/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBasketsStorage is a mock of BasketsStorage interface.
type MockBasketsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBasketsStorageMockRecorder
}

// MockBasketsStorageMockRecorder is the mock recorder for MockBasketsStorage.
type MockBasketsStorageMockRecorder struct {
	mock *MockBasketsStorage
}

// NewMockBasketsStorage creates a new mock instance.
func NewMockBasketsStorage(ctrl *gomock.Controller) *MockBasketsStorage {
	mock := &MockBasketsStorage{ctrl: ctrl}
	mock.recorder = &MockBasketsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasketsStorage) EXPECT() *MockBasketsStorageMockRecorder {
	return m.recorder
}

// AddBasketProduct mocks base method.
func (m *MockBasketsStorage) AddBasketProduct(arg0 domain.BasketProduct) (domain.BasketProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBasketProduct", arg0)
	ret0, _ := ret[0].(domain.BasketProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBasketProduct indicates an expected call of AddBasketProduct.
func (mr *MockBasketsStorageMockRecorder) AddBasketProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBasketProduct", reflect.TypeOf((*MockBasketsStorage)(nil).AddBasketProduct), arg0)
}

// DeleteBasketProduct mocks base method.
func (m *MockBasketsStorage) DeleteBasketProduct(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBasketProduct", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBasketProduct indicates an expected call of DeleteBasketProduct.
func (mr *MockBasketsStorageMockRecorder) DeleteBasketProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBasketProduct", reflect.TypeOf((*MockBasketsStorage)(nil).DeleteBasketProduct), arg0)
}

// EditBasketProduct mocks base method.
func (m *MockBasketsStorage) EditBasketProduct(arg0 domain.BasketProduct) (domain.BasketProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditBasketProduct", arg0)
	ret0, _ := ret[0].(domain.BasketProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditBasketProduct indicates an expected call of EditBasketProduct.
func (mr *MockBasketsStorageMockRecorder) EditBasketProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBasketProduct", reflect.TypeOf((*MockBasketsStorage)(nil).EditBasketProduct), arg0)
}

// GetBasket mocks base method.
func (m *MockBasketsStorage) GetBasket(arg0 int) (*domain.Basket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasket", arg0)
	ret0, _ := ret[0].(*domain.Basket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasket indicates an expected call of GetBasket.
func (mr *MockBasketsStorageMockRecorder) GetBasket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasket", reflect.TypeOf((*MockBasketsStorage)(nil).GetBasket), arg0)
}

// GetBasketProduct mocks base method.
func (m *MockBasketsStorage) GetBasketProduct(arg0, arg1 int) (*domain.BasketProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasketProduct", arg0, arg1)
	ret0, _ := ret[0].(*domain.BasketProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasketProduct indicates an expected call of GetBasketProduct.
func (mr *MockBasketsStorageMockRecorder) GetBasketProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasketProduct", reflect.TypeOf((*MockBasketsStorage)(nil).GetBasketProduct), arg0, arg1)
}

// GetBasketProducts mocks base method.
func (m *MockBasketsStorage) GetBasketProducts(arg0 int) ([]domain.BasketProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasketProducts", arg0)
	ret0, _ := ret[0].([]domain.BasketProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasketProducts indicates an expected call of GetBasketProducts.
func (mr *MockBasketsStorageMockRecorder) GetBasketProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasketProducts", reflect.TypeOf((*MockBasketsStorage)(nil).GetBasketProducts), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: orders.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	"example.com/m/v2/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrdersStorage is a mock of OrdersStorage interface.
type MockOrdersStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersStorageMockRecorder
}

// MockOrdersStorageMockRecorder is the mock recorder for MockOrdersStorage.
type MockOrdersStorageMockRecorder struct {
	mock *MockOrdersStorage
}

// NewMockOrdersStorage creates a new mock instance.
func NewMockOrdersStorage(ctrl *gomock.Controller) *MockOrdersStorage {
	mock := &MockOrdersStorage{ctrl: ctrl}
	mock.recorder = &MockOrdersStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersStorage) EXPECT() *MockOrdersStorageMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrdersStorage) AddOrder(arg0 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrdersStorageMockRecorder) AddOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrdersStorage)(nil).AddOrder), arg0)
}

// AddProductOrder mocks base method.
func (m *MockOrdersStorage) AddProductOrder(arg0 domain.ProductOrder) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductOrder", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProductOrder indicates an expected call of AddProductOrder.
func (mr *MockOrdersStorageMockRecorder) AddProductOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductOrder", reflect.TypeOf((*MockOrdersStorage)(nil).AddProductOrder), arg0)
}

// DeleteOrder mocks base method.
func (m *MockOrdersStorage) DeleteOrder(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrdersStorageMockRecorder) DeleteOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrdersStorage)(nil).DeleteOrder), arg0)
}

// DeleteProductsOrder mocks base method.
func (m *MockOrdersStorage) DeleteProductsOrder(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductsOrder", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductsOrder indicates an expected call of DeleteProductsOrder.
func (mr *MockOrdersStorageMockRecorder) DeleteProductsOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductsOrder", reflect.TypeOf((*MockOrdersStorage)(nil).DeleteProductsOrder), arg0)
}

// GetOrder mocks base method.
func (m *MockOrdersStorage) GetOrder(arg0 int) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrdersStorageMockRecorder) GetOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrdersStorage)(nil).GetOrder), arg0)
}

// GetOrders mocks base method.
func (m *MockOrdersStorage) GetOrders() ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrdersStorageMockRecorder) GetOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrdersStorage)(nil).GetOrders))
}

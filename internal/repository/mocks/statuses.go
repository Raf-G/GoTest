// Code generated by MockGen. DO NOT EDIT.
// Source: statuses.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	"example.com/m/v2/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatusesStorage is a mock of StatusesStorage interface.
type MockStatusesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStatusesStorageMockRecorder
}

// MockStatusesStorageMockRecorder is the mock recorder for MockStatusesStorage.
type MockStatusesStorageMockRecorder struct {
	mock *MockStatusesStorage
}

// NewMockStatusesStorage creates a new mock instance.
func NewMockStatusesStorage(ctrl *gomock.Controller) *MockStatusesStorage {
	mock := &MockStatusesStorage{ctrl: ctrl}
	mock.recorder = &MockStatusesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusesStorage) EXPECT() *MockStatusesStorageMockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockStatusesStorage) GetStatus(arg0 int) (domain.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0)
	ret0, _ := ret[0].(domain.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockStatusesStorageMockRecorder) GetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockStatusesStorage)(nil).GetStatus), arg0)
}

// GetStatuses mocks base method.
func (m *MockStatusesStorage) GetStatuses() ([]domain.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatuses")
	ret0, _ := ret[0].([]domain.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatuses indicates an expected call of GetStatuses.
func (mr *MockStatusesStorageMockRecorder) GetStatuses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatuses", reflect.TypeOf((*MockStatusesStorage)(nil).GetStatuses))
}
